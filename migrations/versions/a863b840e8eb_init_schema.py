"""init schema

Revision ID: a863b840e8eb
Revises: 
Create Date: 2025-08-27 17:21:18.308984

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a863b840e8eb'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clients',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=160), nullable=False),
    sa.Column('cnpj', sa.String(length=20), nullable=False),
    sa.Column('slug', sa.String(length=64), nullable=False),
    sa.Column('logo_url', sa.String(length=255), nullable=True),
    sa.Column('contact_email', sa.String(length=160), nullable=True),
    sa.Column('contact_phone', sa.String(length=30), nullable=True),
    sa.Column('certificate_template_html', sa.Text(), nullable=True),
    sa.Column('default_min_presence_pct', sa.Integer(), nullable=True),
    sa.Column('lgpd_policy_text', sa.Text(), nullable=True),
    sa.Column('config_json', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_clients'))
    )
    with op.batch_alter_table('clients', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_clients_slug'), ['slug'], unique=True)

    op.create_table('idempotency_keys',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('key', sa.String(length=80), nullable=False),
    sa.Column('signature', sa.String(length=80), nullable=False),
    sa.Column('response_body', sa.LargeBinary(), nullable=False),
    sa.Column('response_mime', sa.String(length=80), nullable=False),
    sa.Column('status_code', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_idempotency_keys'))
    )
    with op.batch_alter_table('idempotency_keys', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_idempotency_keys_key'), ['key'], unique=False)
        batch_op.create_index(batch_op.f('ix_idempotency_keys_signature'), ['signature'], unique=False)

    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('jti', sa.String(length=64), nullable=False),
    sa.Column('user_email', sa.String(length=160), nullable=False),
    sa.Column('tenant_slug', sa.String(length=64), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('revoked_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_refresh_tokens'))
    )
    with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_refresh_tokens_jti'), ['jti'], unique=True)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles'))
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('venue', sa.String(length=160), nullable=True),
    sa.Column('capacity_total', sa.Integer(), nullable=True),
    sa.Column('workload_hours', sa.Integer(), nullable=True),
    sa.Column('min_presence_pct', sa.Integer(), nullable=True),
    sa.Column('start_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name=op.f('fk_events_client_id_clients')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_events'))
    )
    op.create_table('students',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=160), nullable=False),
    sa.Column('cpf', sa.String(length=14), nullable=False),
    sa.Column('email', sa.String(length=160), nullable=False),
    sa.Column('ra', sa.String(length=40), nullable=True),
    sa.Column('phone', sa.String(length=30), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name=op.f('fk_students_client_id_clients')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_students')),
    sa.UniqueConstraint('client_id', 'email', name='uq_student_email_tenant')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('email', sa.String(length=160), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('mfa', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name=op.f('fk_users_client_id_clients')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=False)

    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('entity', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=30), nullable=False),
    sa.Column('diff_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name=op.f('fk_audit_logs_client_id_clients')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_audit_logs_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_audit_logs'))
    )
    op.create_table('day_events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('room', sa.String(length=80), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('fk_day_events_event_id_events')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_day_events'))
    )
    op.create_table('enrollments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'confirmed', 'waitlist', 'cancelled', name='enrollmentstatus'), nullable=False),
    sa.Column('qr_seed', sa.String(length=64), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('fk_enrollments_event_id_events')),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], name=op.f('fk_enrollments_student_id_students')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_enrollments')),
    sa.UniqueConstraint('student_id', 'event_id', name='uq_enrollment_student_event')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_user_roles_role_id_roles')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_roles_user_id_users')),
    sa.PrimaryKeyConstraint('user_id', 'role_id', name=op.f('pk_user_roles')),
    sa.UniqueConstraint('user_id', 'role_id', name='uq_user_role')
    )
    op.create_table('attendances',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('enrollment_id', sa.Integer(), nullable=False),
    sa.Column('day_event_id', sa.Integer(), nullable=False),
    sa.Column('checkin_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('checkout_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('origin', sa.String(length=20), nullable=False),
    sa.ForeignKeyConstraint(['day_event_id'], ['day_events.id'], name=op.f('fk_attendances_day_event_id_day_events')),
    sa.ForeignKeyConstraint(['enrollment_id'], ['enrollments.id'], name=op.f('fk_attendances_enrollment_id_enrollments')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_attendances')),
    sa.UniqueConstraint('enrollment_id', 'day_event_id', name='uq_attendance_unique')
    )
    op.create_table('certificates',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('enrollment_id', sa.Integer(), nullable=False),
    sa.Column('issued_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('pdf_url', sa.String(length=255), nullable=False),
    sa.Column('verify_code', sa.String(length=64), nullable=False),
    sa.Column('status', sa.Enum('issued', 'revoked', name='certificatestatus'), nullable=False),
    sa.ForeignKeyConstraint(['enrollment_id'], ['enrollments.id'], name=op.f('fk_certificates_enrollment_id_enrollments')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_certificates'))
    )
    with op.batch_alter_table('certificates', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_certificates_verify_code'), ['verify_code'], unique=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('certificates', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_certificates_verify_code'))

    op.drop_table('certificates')
    op.drop_table('attendances')
    op.drop_table('user_roles')
    op.drop_table('enrollments')
    op.drop_table('day_events')
    op.drop_table('audit_logs')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    op.drop_table('students')
    op.drop_table('events')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))

    op.drop_table('roles')
    with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_refresh_tokens_jti'))

    op.drop_table('refresh_tokens')
    with op.batch_alter_table('idempotency_keys', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_idempotency_keys_signature'))
        batch_op.drop_index(batch_op.f('ix_idempotency_keys_key'))

    op.drop_table('idempotency_keys')
    with op.batch_alter_table('clients', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_clients_slug'))

    op.drop_table('clients')
    # ### end Alembic commands ###
